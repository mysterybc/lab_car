// ---------------------------------------------------------------------
// THIS FILE IS AUTO-GENERATED BY BEHAVIAC DESIGNER, SO PLEASE DON'T MODIFY IT BY YOURSELF!
// ---------------------------------------------------------------------

#ifndef _BEHAVIAC_AGENT_PROPERTIES_H_
#define _BEHAVIAC_AGENT_PROPERTIES_H_

#include "behaviac_agent_headers.h"
#include "behaviac_agent_member_visitor.h"
#include "behaviac_customized_types.h"

namespace behaviac
{
	// ---------------------------------------------------------------------
	// Delegate methods
	// ---------------------------------------------------------------------

	inline void FunctionPointer_behaviac_Agent_LogMessage(char* param0) { behaviac::Agent::LogMessage(param0); }

	inline void Set_GroupAsBasicLogic_CurrentTask(Agent* self, TaskIndividual value) { ((GroupAsBasicLogic*)self)->CurrentTask = value; };
	inline const void* Get_GroupAsBasicLogic_CurrentTask(Agent* self) { return &((GroupAsBasicLogic*)self)->CurrentTask; };

	inline void Set_GroupAsBasicLogic_GroupMember(Agent* self, behaviac::vector<int> value) { ((GroupAsBasicLogic*)self)->GroupMember = value; };
	inline const void* Get_GroupAsBasicLogic_GroupMember(Agent* self) { return &((GroupAsBasicLogic*)self)->GroupMember; };

	inline void Set_GroupAsBasicLogic_GroupMember(Agent* self, int value, int index) { ((GroupAsBasicLogic*)self)->GroupMember[index] = value; };
	inline const void* Get_GroupAsBasicLogic_GroupMember(Agent* self, int index) { return &((GroupAsBasicLogic*)self)->GroupMember[index]; };

	inline void Set_GroupAsBasicLogic_GroupState(Agent* self, behaviac::vector<ForeFuncState> value) { ((GroupAsBasicLogic*)self)->GroupState = value; };
	inline const void* Get_GroupAsBasicLogic_GroupState(Agent* self) { return &((GroupAsBasicLogic*)self)->GroupState; };

	inline void Set_GroupAsBasicLogic_GroupState(Agent* self, ForeFuncState value, int index) { ((GroupAsBasicLogic*)self)->GroupState[index] = value; };
	inline const void* Get_GroupAsBasicLogic_GroupState(Agent* self, int index) { return &((GroupAsBasicLogic*)self)->GroupState[index]; };

	inline void Set_GroupAsBasicLogic_wait_for_CB(Agent* self, bool value) { ((GroupAsBasicLogic*)self)->wait_for_CB = value; };
	inline const void* Get_GroupAsBasicLogic_wait_for_CB(Agent* self) { return &((GroupAsBasicLogic*)self)->wait_for_CB; };

	inline void FunctionPointer_GroupAsBasicLogic_ActionCancel(Agent* self) { ((GroupAsBasicLogic*)self)->ActionCancel(); }
	inline bool FunctionPointer_GroupAsBasicLogic_GroupIdle(Agent* self) { return ((GroupAsBasicLogic*)self)->GroupIdle(); }
	inline void FunctionPointer_GroupAsBasicLogic_LogMessage(char* param0) { GroupAsBasicLogic::LogMessage(param0); }
	inline bool FunctionPointer_GroupAsBasicLogic_MemberConsistent(Agent* self) { return ((GroupAsBasicLogic*)self)->MemberConsistent(); }
	inline void FunctionPointer_GroupAsBasicLogic_RealTimeProcessing(Agent* self) { ((GroupAsBasicLogic*)self)->RealTimeProcessing(); }
	inline void FunctionPointer_GroupAsBasicLogic_SendGoal(Agent* self) { ((GroupAsBasicLogic*)self)->SendGoal(); }
	inline void FunctionPointer_GroupAsBasicLogic_SetMemberAndGoal(Agent* self) { ((GroupAsBasicLogic*)self)->SetMemberAndGoal(); }
	inline bool FunctionPointer_GroupAsBasicLogic_TaskListEmpty(Agent* self) { return ((GroupAsBasicLogic*)self)->TaskListEmpty(); }
	inline TaskIndividual FunctionPointer_GroupAsBasicLogic_TaskListPop(Agent* self) { return ((GroupAsBasicLogic*)self)->TaskListPop(); }

	inline void Set_BlackBoard_car_id(Agent* self, int value) { ((BlackBoard*)self)->car_id = value; };
	inline const void* Get_BlackBoard_car_id(Agent* self) { return &((BlackBoard*)self)->car_id; };

	inline void FunctionPointer_BlackBoard_BackgrdFuncProcessing(Agent* self, TaskIndividual BackFunc) { ((BlackBoard*)self)->BackgrdFuncProcessing(BackFunc); }
	inline void FunctionPointer_BlackBoard_LogMessage(char* param0) { BlackBoard::LogMessage(param0); }

	inline void Set_TaskRealize_fore_func_state(Agent* self, ForeFuncState value) { ((TaskRealize*)self)->fore_func_state = value; };
	inline const void* Get_TaskRealize_fore_func_state(Agent* self) { return &((TaskRealize*)self)->fore_func_state; };

	inline void FunctionPointer_TaskRealize_Assemble(Agent* self) { ((TaskRealize*)self)->Assemble(); }
	inline void FunctionPointer_TaskRealize_LogMessage(char* param0) { TaskRealize::LogMessage(param0); }
	inline void FunctionPointer_TaskRealize_March_gps(Agent* self) { ((TaskRealize*)self)->March_gps(); }
	inline void FunctionPointer_TaskRealize_March_laser(Agent* self) { ((TaskRealize*)self)->March_laser(); }
	inline void FunctionPointer_TaskRealize_Remote_Control(Agent* self) { ((TaskRealize*)self)->Remote_Control(); }
	inline void FunctionPointer_TaskRealize_Search(Agent* self) { ((TaskRealize*)self)->Search(); }
}
#endif // _BEHAVIAC_AGENT_PROPERTIES_H_
