// ---------------------------------------------------------------------
// THIS FILE IS AUTO-GENERATED BY BEHAVIAC DESIGNER, SO PLEASE DON'T MODIFY IT BY YOURSELF!
// ---------------------------------------------------------------------

#include "behaviac/common/meta.h"
#include "behaviac/common/member.h"
#include "behaviac_agent_meta.h"

namespace behaviac
{
	class CMethod_behaviac_Agent_VectorAdd : public CAgentMethodVoidBase
	{
		IInstanceMember* _param0;
		IInstanceMember* _param1;

	public: 
		CMethod_behaviac_Agent_VectorAdd() : _param0(0) , _param1(0) 
		{
		}

		CMethod_behaviac_Agent_VectorAdd(CMethod_behaviac_Agent_VectorAdd &rhs) : CAgentMethodVoidBase(rhs) , _param0(0) , _param1(0) 
		{
		}

		~CMethod_behaviac_Agent_VectorAdd()
		{
			BEHAVIAC_DELETE _param0;
			BEHAVIAC_DELETE _param1;
		}

		virtual IInstanceMember* clone()
		{
			return BEHAVIAC_NEW CMethod_behaviac_Agent_VectorAdd(*this);
		}

		virtual void load(const char* instance, behaviac::vector<behaviac::string>& paramStrs)
		{
			BEHAVIAC_ASSERT(paramStrs.size() == 2);

			behaviac::StringUtils::StringCopySafe(kInstanceNameMax, _instance, instance);
			_param0 = AgentMeta::TParseProperty<IList >(paramStrs[0].c_str());
			_param1 = AgentMeta::TParseProperty<System::Object >(paramStrs[1].c_str());
		}

		virtual void run(Agent* self)
		{
			BEHAVIAC_ASSERT(_param0 != NULL);
			BEHAVIAC_ASSERT(_param1 != NULL);

			IList& pValue_param0 = *(IList*)_param0->GetValue(self, behaviac::Meta::IsVector<IList >::Result, behaviac::GetClassTypeNumberId<IList >());
			System::Object& pValue_param1 = *(System::Object*)_param1->GetValue(self, behaviac::Meta::IsVector<System::Object >::Result, behaviac::GetClassTypeNumberId<System::Object >());
			behaviac::Agent::VectorAdd(pValue_param0, pValue_param1);
		}
	};

	class CMethod_behaviac_Agent_VectorClear : public CAgentMethodVoidBase
	{
		IInstanceMember* _param0;

	public: 
		CMethod_behaviac_Agent_VectorClear() : _param0(0) 
		{
		}

		CMethod_behaviac_Agent_VectorClear(CMethod_behaviac_Agent_VectorClear &rhs) : CAgentMethodVoidBase(rhs) , _param0(0) 
		{
		}

		~CMethod_behaviac_Agent_VectorClear()
		{
			BEHAVIAC_DELETE _param0;
		}

		virtual IInstanceMember* clone()
		{
			return BEHAVIAC_NEW CMethod_behaviac_Agent_VectorClear(*this);
		}

		virtual void load(const char* instance, behaviac::vector<behaviac::string>& paramStrs)
		{
			BEHAVIAC_ASSERT(paramStrs.size() == 1);

			behaviac::StringUtils::StringCopySafe(kInstanceNameMax, _instance, instance);
			_param0 = AgentMeta::TParseProperty<IList >(paramStrs[0].c_str());
		}

		virtual void run(Agent* self)
		{
			BEHAVIAC_ASSERT(_param0 != NULL);

			IList& pValue_param0 = *(IList*)_param0->GetValue(self, behaviac::Meta::IsVector<IList >::Result, behaviac::GetClassTypeNumberId<IList >());
			behaviac::Agent::VectorClear(pValue_param0);
		}
	};

	class CMethod_behaviac_Agent_VectorContains : public CAgentMethodBase<bool>
	{
		IInstanceMember* _param0;
		IInstanceMember* _param1;

	public: 
		CMethod_behaviac_Agent_VectorContains() : _param0(0) , _param1(0) 
		{
		}

		CMethod_behaviac_Agent_VectorContains(CMethod_behaviac_Agent_VectorContains &rhs) : CAgentMethodBase<bool>(rhs) , _param0(0) , _param1(0) 
		{
		}

		~CMethod_behaviac_Agent_VectorContains()
		{
			BEHAVIAC_DELETE _param0;
			BEHAVIAC_DELETE _param1;
		}

		virtual IInstanceMember* clone()
		{
			return BEHAVIAC_NEW CMethod_behaviac_Agent_VectorContains(*this);
		}

		virtual void load(const char* instance, behaviac::vector<behaviac::string>& paramStrs)
		{
			BEHAVIAC_ASSERT(paramStrs.size() == 2);

			behaviac::StringUtils::StringCopySafe(kInstanceNameMax, _instance, instance);
			_param0 = AgentMeta::TParseProperty<IList >(paramStrs[0].c_str());
			_param1 = AgentMeta::TParseProperty<System::Object >(paramStrs[1].c_str());
		}

		virtual void run(Agent* self)
		{
			BEHAVIAC_ASSERT(_param0 != NULL);
			BEHAVIAC_ASSERT(_param1 != NULL);

			IList& pValue_param0 = *(IList*)_param0->GetValue(self, behaviac::Meta::IsVector<IList >::Result, behaviac::GetClassTypeNumberId<IList >());
			System::Object& pValue_param1 = *(System::Object*)_param1->GetValue(self, behaviac::Meta::IsVector<System::Object >::Result, behaviac::GetClassTypeNumberId<System::Object >());
			_returnValue->value = behaviac::Agent::VectorContains(pValue_param0, pValue_param1);
		}
	};

	class CMethod_behaviac_Agent_VectorLength : public CAgentMethodBase<int>
	{
		IInstanceMember* _param0;

	public: 
		CMethod_behaviac_Agent_VectorLength() : _param0(0) 
		{
		}

		CMethod_behaviac_Agent_VectorLength(CMethod_behaviac_Agent_VectorLength &rhs) : CAgentMethodBase<int>(rhs) , _param0(0) 
		{
		}

		~CMethod_behaviac_Agent_VectorLength()
		{
			BEHAVIAC_DELETE _param0;
		}

		virtual IInstanceMember* clone()
		{
			return BEHAVIAC_NEW CMethod_behaviac_Agent_VectorLength(*this);
		}

		virtual void load(const char* instance, behaviac::vector<behaviac::string>& paramStrs)
		{
			BEHAVIAC_ASSERT(paramStrs.size() == 1);

			behaviac::StringUtils::StringCopySafe(kInstanceNameMax, _instance, instance);
			_param0 = AgentMeta::TParseProperty<IList >(paramStrs[0].c_str());
		}

		virtual void run(Agent* self)
		{
			BEHAVIAC_ASSERT(_param0 != NULL);

			IList& pValue_param0 = *(IList*)_param0->GetValue(self, behaviac::Meta::IsVector<IList >::Result, behaviac::GetClassTypeNumberId<IList >());
			_returnValue->value = behaviac::Agent::VectorLength(pValue_param0);
		}
	};

	class CMethod_behaviac_Agent_VectorRemove : public CAgentMethodVoidBase
	{
		IInstanceMember* _param0;
		IInstanceMember* _param1;

	public: 
		CMethod_behaviac_Agent_VectorRemove() : _param0(0) , _param1(0) 
		{
		}

		CMethod_behaviac_Agent_VectorRemove(CMethod_behaviac_Agent_VectorRemove &rhs) : CAgentMethodVoidBase(rhs) , _param0(0) , _param1(0) 
		{
		}

		~CMethod_behaviac_Agent_VectorRemove()
		{
			BEHAVIAC_DELETE _param0;
			BEHAVIAC_DELETE _param1;
		}

		virtual IInstanceMember* clone()
		{
			return BEHAVIAC_NEW CMethod_behaviac_Agent_VectorRemove(*this);
		}

		virtual void load(const char* instance, behaviac::vector<behaviac::string>& paramStrs)
		{
			BEHAVIAC_ASSERT(paramStrs.size() == 2);

			behaviac::StringUtils::StringCopySafe(kInstanceNameMax, _instance, instance);
			_param0 = AgentMeta::TParseProperty<IList >(paramStrs[0].c_str());
			_param1 = AgentMeta::TParseProperty<System::Object >(paramStrs[1].c_str());
		}

		virtual void run(Agent* self)
		{
			BEHAVIAC_ASSERT(_param0 != NULL);
			BEHAVIAC_ASSERT(_param1 != NULL);

			IList& pValue_param0 = *(IList*)_param0->GetValue(self, behaviac::Meta::IsVector<IList >::Result, behaviac::GetClassTypeNumberId<IList >());
			System::Object& pValue_param1 = *(System::Object*)_param1->GetValue(self, behaviac::Meta::IsVector<System::Object >::Result, behaviac::GetClassTypeNumberId<System::Object >());
			behaviac::Agent::VectorRemove(pValue_param0, pValue_param1);
		}
	};

	class CMethod_GroupAsBasicLogic_IsForegrdFunc : public CAgentMethodBase<bool>
	{
		IInstanceMember* _Task;

	public: 
		CMethod_GroupAsBasicLogic_IsForegrdFunc() : _Task(0) 
		{
		}

		CMethod_GroupAsBasicLogic_IsForegrdFunc(CMethod_GroupAsBasicLogic_IsForegrdFunc &rhs) : CAgentMethodBase<bool>(rhs) , _Task(0) 
		{
		}

		~CMethod_GroupAsBasicLogic_IsForegrdFunc()
		{
			BEHAVIAC_DELETE _Task;
		}

		virtual IInstanceMember* clone()
		{
			return BEHAVIAC_NEW CMethod_GroupAsBasicLogic_IsForegrdFunc(*this);
		}

		virtual void load(const char* instance, behaviac::vector<behaviac::string>& paramStrs)
		{
			BEHAVIAC_ASSERT(paramStrs.size() == 1);

			behaviac::StringUtils::StringCopySafe(kInstanceNameMax, _instance, instance);
			_Task = AgentMeta::TParseProperty<TaskIndividual >(paramStrs[0].c_str());
		}

		virtual void run(Agent* self)
		{
			BEHAVIAC_ASSERT(_Task != NULL);

			const TaskIndividual& pValue_Task = *(const TaskIndividual*)_Task->GetValue(self, behaviac::Meta::IsVector<const TaskIndividual >::Result, behaviac::GetClassTypeNumberId<const TaskIndividual >());
			self = Agent::GetParentAgent(self, _instance);

			_returnValue->value = ((GroupAsBasicLogic*)self)->IsForegrdFunc(pValue_Task);
		}
	};

	class BehaviorLoaderImplement : BehaviorLoader
	{
	public:
		BehaviorLoaderImplement()
		{
			AgentMeta::SetBehaviorLoader(this);
		}

		virtual ~BehaviorLoaderImplement()
		{
		}

		virtual bool load()
		{
			AgentMeta::SetTotalSignature(2443172519u);

			AgentMeta* meta = NULL;
			BEHAVIAC_UNUSED_VAR(meta);

			// behaviac::Agent
			meta = BEHAVIAC_NEW AgentMeta(24743406u);
			AgentMeta::GetAgentMetas()[1770892321u] = meta;
			meta->RegisterMethod(1045109914u, BEHAVIAC_NEW CAgentStaticMethodVoid_1<char*>(FunctionPointer_behaviac_Agent_LogMessage));
			meta->RegisterMethod(2521019022u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorAdd());
			meta->RegisterMethod(2306090221u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorClear());
			meta->RegisterMethod(3483755530u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorContains());
			meta->RegisterMethod(505785840u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorLength());
			meta->RegisterMethod(502968959u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorRemove());

			// GroupAsBasicLogic
			meta = BEHAVIAC_NEW AgentMeta(2785138483u);
			AgentMeta::GetAgentMetas()[2191909479u] = meta;
			meta->RegisterMemberProperty(3122630375u, BEHAVIAC_NEW CMemberProperty< TaskIndividual >("CurrentTask", Set_GroupAsBasicLogic_CurrentTask, Get_GroupAsBasicLogic_CurrentTask));
			meta->RegisterMemberProperty(431491385u, BEHAVIAC_NEW CMemberProperty< behaviac::vector<int> >("GroupMember", Set_GroupAsBasicLogic_GroupMember, Get_GroupAsBasicLogic_GroupMember));
			meta->RegisterMemberProperty(1782603186u, BEHAVIAC_NEW CMemberArrayItemProperty< int >("GroupMember[]", Set_GroupAsBasicLogic_GroupMember, Get_GroupAsBasicLogic_GroupMember));
			meta->RegisterMemberProperty(3166702640u, BEHAVIAC_NEW CMemberProperty< behaviac::vector<ForeFuncState> >("GroupState", Set_GroupAsBasicLogic_GroupState, Get_GroupAsBasicLogic_GroupState));
			meta->RegisterMemberProperty(3173903789u, BEHAVIAC_NEW CMemberArrayItemProperty< ForeFuncState >("GroupState[]", Set_GroupAsBasicLogic_GroupState, Get_GroupAsBasicLogic_GroupState));
			meta->RegisterMemberProperty(1877011335u, BEHAVIAC_NEW CMemberProperty< bool >("wait_for_CB", Set_GroupAsBasicLogic_wait_for_CB, Get_GroupAsBasicLogic_wait_for_CB));
			meta->RegisterMethod(3721854477u, BEHAVIAC_NEW CAgentMethodVoid(FunctionPointer_GroupAsBasicLogic_ActionCancel));
			meta->RegisterMethod(3284365111u, BEHAVIAC_NEW CAgentMethod< bool >(FunctionPointer_GroupAsBasicLogic_GroupIdle));
			meta->RegisterMethod(4117300539u, BEHAVIAC_NEW CMethod_GroupAsBasicLogic_IsForegrdFunc());
			meta->RegisterMethod(1045109914u, BEHAVIAC_NEW CAgentStaticMethodVoid_1<char*>(FunctionPointer_GroupAsBasicLogic_LogMessage));
			meta->RegisterMethod(1819870197u, BEHAVIAC_NEW CAgentMethod< bool >(FunctionPointer_GroupAsBasicLogic_MemberConsistent));
			meta->RegisterMethod(3654085091u, BEHAVIAC_NEW CAgentMethodVoid(FunctionPointer_GroupAsBasicLogic_RealTimeProcessing));
			meta->RegisterMethod(2245930059u, BEHAVIAC_NEW CAgentMethodVoid(FunctionPointer_GroupAsBasicLogic_SendGoal));
			meta->RegisterMethod(3947069661u, BEHAVIAC_NEW CAgentMethodVoid(FunctionPointer_GroupAsBasicLogic_SetMemberAndGoal));
			meta->RegisterMethod(732284854u, BEHAVIAC_NEW CAgentMethod< bool >(FunctionPointer_GroupAsBasicLogic_TaskListEmpty));
			meta->RegisterMethod(953611468u, BEHAVIAC_NEW CAgentMethod< TaskIndividual >(FunctionPointer_GroupAsBasicLogic_TaskListPop));
			meta->RegisterMethod(2521019022u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorAdd());
			meta->RegisterMethod(2306090221u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorClear());
			meta->RegisterMethod(3483755530u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorContains());
			meta->RegisterMethod(505785840u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorLength());
			meta->RegisterMethod(502968959u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorRemove());

			// BlackBoard
			meta = BEHAVIAC_NEW AgentMeta(2010603197u);
			AgentMeta::GetAgentMetas()[554893437u] = meta;
			meta->RegisterMemberProperty(2767060324u, BEHAVIAC_NEW CMemberProperty< int >("car_id", Set_BlackBoard_car_id, Get_BlackBoard_car_id));
			meta->RegisterMethod(2249462959u, BEHAVIAC_NEW CAgentMethodVoid_1<TaskIndividual>(FunctionPointer_BlackBoard_BackgrdFuncProcessing));
			meta->RegisterMethod(1045109914u, BEHAVIAC_NEW CAgentStaticMethodVoid_1<char*>(FunctionPointer_BlackBoard_LogMessage));
			meta->RegisterMethod(2521019022u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorAdd());
			meta->RegisterMethod(2306090221u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorClear());
			meta->RegisterMethod(3483755530u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorContains());
			meta->RegisterMethod(505785840u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorLength());
			meta->RegisterMethod(502968959u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorRemove());

			// TaskRealize
			meta = BEHAVIAC_NEW AgentMeta(385458823u);
			AgentMeta::GetAgentMetas()[682816214u] = meta;
			meta->RegisterMemberProperty(1476038657u, BEHAVIAC_NEW CMemberProperty< ForeFuncState >("fore_func_state", Set_TaskRealize_fore_func_state, Get_TaskRealize_fore_func_state));
			meta->RegisterMethod(3496515545u, BEHAVIAC_NEW CAgentMethodVoid(FunctionPointer_TaskRealize_Assemble));
			meta->RegisterMethod(1045109914u, BEHAVIAC_NEW CAgentStaticMethodVoid_1<char*>(FunctionPointer_TaskRealize_LogMessage));
			meta->RegisterMethod(3106451133u, BEHAVIAC_NEW CAgentMethodVoid(FunctionPointer_TaskRealize_March_gps));
			meta->RegisterMethod(2622773627u, BEHAVIAC_NEW CAgentMethodVoid(FunctionPointer_TaskRealize_March_laser));
			meta->RegisterMethod(2307349957u, BEHAVIAC_NEW CAgentMethodVoid(FunctionPointer_TaskRealize_Remote_Control));
			meta->RegisterMethod(1126517323u, BEHAVIAC_NEW CAgentMethodVoid(FunctionPointer_TaskRealize_Search));
			meta->RegisterMethod(2521019022u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorAdd());
			meta->RegisterMethod(2306090221u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorClear());
			meta->RegisterMethod(3483755530u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorContains());
			meta->RegisterMethod(505785840u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorLength());
			meta->RegisterMethod(502968959u, BEHAVIAC_NEW CMethod_behaviac_Agent_VectorRemove());

			AgentMeta::Register<behaviac::Agent>("behaviac::Agent");
			AgentMeta::Register<GroupAsBasicLogic>("GroupAsBasicLogic");
			AgentMeta::Register<BlackBoard>("BlackBoard");
			AgentMeta::Register<TaskRealize>("TaskRealize");
			AgentMeta::Register<TaskIndividual>("TaskIndividual");
			AgentMeta::Register<ForeFuncState>("ForeFuncState");

			Agent::RegisterInstanceName<GroupAsBasicLogic>("GroupAsBasicLogic");
			Agent::RegisterInstanceName<BlackBoard>("BlackBoard");
			Agent::RegisterInstanceName<TaskRealize>("TaskRealize");

			return true;
		}

		virtual bool unLoad()
		{
			AgentMeta::UnRegister<behaviac::Agent>("behaviac::Agent");
			AgentMeta::UnRegister<GroupAsBasicLogic>("GroupAsBasicLogic");
			AgentMeta::UnRegister<BlackBoard>("BlackBoard");
			AgentMeta::UnRegister<TaskRealize>("TaskRealize");
			AgentMeta::UnRegister<TaskIndividual>("TaskIndividual");
			AgentMeta::UnRegister<ForeFuncState>("ForeFuncState");

			Agent::UnRegisterInstanceName<GroupAsBasicLogic>("GroupAsBasicLogic");
			Agent::UnRegisterInstanceName<BlackBoard>("BlackBoard");
			Agent::UnRegisterInstanceName<TaskRealize>("TaskRealize");

			return true;
		}
	};

	static BehaviorLoaderImplement _behaviorLoaderImplement_;

	static BehaviorLoaderImplement* _pBehaviorLoader_ = NULL;

	void InitBehaviorLoader()
	{
		_pBehaviorLoader_ = BEHAVIAC_NEW BehaviorLoaderImplement();
	}

	void DestroyBehaviorLoader()
	{
		if (_pBehaviorLoader_)
		{
			BEHAVIAC_DELETE _pBehaviorLoader_;
			_pBehaviorLoader_ = NULL;
		}
	}
}
